---
title: "R tips and tricks CMAR R Nerds"
format:
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Quick Path Formatting
1. Enter your path
2. Highlight the path
3. `ctrl` + `F`
4. In the `Find` bar type `\`
5. In the `Replace` bar type `/`
6. Toggle the `In Selection` option
7. Click `All`
8. Enjoy your formatted file path without having to manually replace every backslash (great for exceptionally long file paths)

```{r}
path <- "C:/Users/Nicole Torrie/Documents/R/repositories/ssnippets"
```



## Simple Code Alignment
`ctrl` + `shift` + `a`
OR 
`crtl` + `I`

#### Before
```{r}
dt_options <- list(
                           dom = 'ft',
paging = FALSE,
              searching = TRUE,
  scrollY = "500px", scrollX = "500px", columnDefs = list(list(className = 'dt-center', targets = "_all"))
)
```

#### After
```{r}
dt_options <- list(
  dom = 'ft',
  paging = FALSE,
  searching = TRUE,
  scrollY = "500px",
  scrollX = "500px",
  columnDefs = list(list(
    className = 'dt-center', targets = "_all"
  ))
)
```




## `ggview` Package

Preview what a `ggplot` figure will look like when you save it to a file.

Copy this code into your console or script to compare the dimensions of `p1` and `p2` in the Plots and Viewer panes (hover over code chunk and click the clipboard to copy). 

Experiment with `w` and `h` to find the best dimensions for the figure.

Use `w` and `h` as the `width` and `height` when you save the figure with `ggsave` to get the same dimensions. 
```{r}
#| eval: false

library(ggview)
library(ggplot2)
library(here)

data("iris")

w <- 8
h <- 4

p1 <- ggplot(iris, aes(Sepal.Length, Petal.Width, col = Species)) +
  geom_point() 
  
p1

p2 <- p1 + canvas(width = w, height = h, units = "cm")

p2

ggsave(p1, filename = here("fig_p1.png"), width = w, height = h, dpi = 600)

```


## Build a dataframe from within a loop

1. Install/load the `purrr` package.
2. Create an empty list outside of the loop. `new_list <- list()`
3. Inside the loop, save the new row `new_list[[i]] <- data you want to save`
4. After the loop, extract data from the list into a dataframe `df <- new_list %>% map_df(rbind)`

```{r}
#| eval: false

library(purrr)
library(dplyr)

dat <- iris %>%
  mutate(Species = as.character(iris$Species))

new_list <- list()

species_list <- unique(dat$Species)

for (i in species_list) {
  dat_i <- dat %>%
    filter(Species == i)
  
  summary_i <- dat_i %>%
    summarise(
      Species = i,
      n_obs = n(),
      mean_petal_width = mean(Petal.Width)
    )
  
  new_list[[i]] <- summary_i
  
}

df <- new_list %>%
  map_df(rbind)

df

```

